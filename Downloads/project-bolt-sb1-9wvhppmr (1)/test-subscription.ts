/**
 * Test-skript f√∂r att verifiera att Stripe-integrationen och prenumerationstj√§nsten fungerar korrekt
 * K√∂r detta skript med: npx ts-node test-subscription.ts
 */

import { createClient } from '@supabase/supabase-js';
import Stripe from 'stripe';

// Milj√∂variabler (h√§mtas automatiskt fr√•n .env.local n√§r man k√∂r npx)
const STRIPE_SECRET_KEY = process.env.STRIPE_SECRET_KEY || '';
const SUPABASE_URL = process.env.NEXT_PUBLIC_SUPABASE_URL || '';
const SUPABASE_SERVICE_ROLE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY || '';
const STRIPE_PRO_PRICE_ID = process.env.NEXT_PUBLIC_STRIPE_PRO_PRICE_ID || '';

// Initiera Stripe och Supabase klienter
const stripe = new Stripe(STRIPE_SECRET_KEY, {
  apiVersion: '2023-10-16' as Stripe.LatestApiVersion,
});

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

/**
 * Huvudfunktion f√∂r att testa prenumerationsfunktionerna
 */
async function testSubscriptionFunctions() {
  console.log('üß™ B√ñRJAR TESTA PRENUMERATIONSFL√ñDET');

  try {
    // 1. Verifiera att vi kan ansluta till Stripe
    console.log('\nüìã TEST 1: Kontrollerar anslutning till Stripe...');
    const stripeBalance = await stripe.balance.retrieve();
    console.log('‚úÖ Anslutning till Stripe lyckades! Tillg√§ngligt saldo:', stripeBalance.available.map(b => `${b.amount} ${b.currency}`).join(', '));

    // 2. Verifiera att priset existerar i Stripe
    console.log('\nüìã TEST 2: Kontrollerar att Pro-priset existerar...');
    const price = await stripe.prices.retrieve(STRIPE_PRO_PRICE_ID);
    console.log(`‚úÖ Pro-priset hittades: ${price.nickname || 'Pro'} - ${price.unit_amount ? price.unit_amount/100 : 0} ${price.currency}`);

    // 3. Verifiera att Supabase √§r konfigurerad med n√∂dv√§ndiga tabeller
    console.log('\nüìã TEST 3: Kontrollerar Supabase-tabeller...');
    const { data: stripeSubsTable, error: tableError } = await supabase
      .from('stripe_subscriptions')
      .select('id')
      .limit(1);
    
    if (tableError) {
      console.error('‚ùå Fel vid kontroll av stripe_subscriptions-tabell:', tableError.message);
    } else {
      console.log('‚úÖ stripe_subscriptions-tabellen √§r konfigurerad korrekt');
    }

    // 4. Kontrollera om auth.users har Stripe-kolumner
    console.log('\nüìã TEST 4: Kontrollerar stripe-kolumner i auth.users...');
    
    // Vi g√∂r en RPC-anrop eftersom vi beh√∂ver anv√§nda service role f√∂r att l√§sa metadatan
    const { data: usersColumns, error: usersError } = await supabase.rpc('get_auth_users_columns');
    
    if (usersError) {
      console.error('‚ùå Kunde inte kontrollera auth.users-kolumner:', usersError.message);
      console.log('OBS: Du kanske beh√∂ver skapa en RPC-funktion f√∂r att l√§sa metadatan, testa ist√§llet att k√∂ra SQL-skriptet manuellt');
    } else {
      const hasStripeColumns = usersColumns && Array.isArray(usersColumns) && 
        usersColumns.some(col => col.column_name === 'stripe_customer_id') &&
        usersColumns.some(col => col.column_name === 'stripe_subscription_id') &&
        usersColumns.some(col => col.column_name === 'subscription_status');
      
      if (hasStripeColumns) {
        console.log('‚úÖ auth.users har alla n√∂dv√§ndiga Stripe-kolumner');
      } else {
        console.log('‚ùå auth.users saknar en eller flera Stripe-kolumner. K√∂r stripe-setup.sql f√∂r att l√§gga till dem');
      }
    }

    // 5. Kontrollera om webhook-signeringen fungerar
    console.log('\nüìã TEST 5: Kontrollerar webhook-konfiguration...');
    const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET;
    
    if (!webhookSecret) {
      console.log('‚ö†Ô∏è STRIPE_WEBHOOK_SECRET saknas i .env.local. Webhooks kommer inte att fungera.');
    } else {
      console.log('‚úÖ STRIPE_WEBHOOK_SECRET √§r konfigurerad');
      
      // Testa att konstruera en webhook-h√§ndelse (mock-test)
      const payload = JSON.stringify({
        id: 'evt_test',
        object: 'event',
        type: 'test',
      });
      
      const testSignature = 'test';
      
      try {
        // Detta kommer att misslyckas med ett specifikt fel om hemligheten √§r korrekt formaterad
        await stripe.webhooks.constructEvent(payload, testSignature, webhookSecret);
      } catch (error: any) {
        if (error.message && error.message.includes('signature')) {
          console.log('‚úÖ Webhook-signering √§r korrekt konfigurerad (f√∂rv√§ntat signaturfel vid test)');
        } else {
          console.error('‚ùå Ov√§ntat fel vid test av webhook-signering:', error.message);
        }
      }
    }

    console.log('\n‚úÖ TESTERNA √ÑR KLARA');
    console.log('\nN√§sta steg:');
    console.log('1. Verifiera att prenumerationsfl√∂det fungerar genom att testa checkout-processen');
    console.log('2. Anv√§nd test-kortnummer fr√•n Stripe (t.ex. 4242 4242 4242 4242) f√∂r betalning');
    console.log('3. Kontrollera att webhooks tar emot h√§ndelser och uppdaterar databasen');

  } catch (error: any) {
    console.error('‚ùå ETT FEL UPPSTOD UNDER TESTERNA:', error.message);
  }
}

// K√∂r testerna
testSubscriptionFunctions().catch(console.error); 