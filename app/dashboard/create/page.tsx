"use client"

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { Navbar } from '@/components/navbar'
import { Footer } from '@/components/footer'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Textarea } from '@/components/ui/textarea'
import { 
  Select, 
  SelectContent, 
  SelectItem, 
  SelectTrigger, 
  SelectValue 
} from '@/components/ui/select'
import { useToast } from '@/components/ui/use-toast'
import { ChevronLeft, Sparkles, Loader2, Calendar, AlertTriangle } from 'lucide-react'
import { contentService } from '@/services/content-service'
import { SocialMediaService } from '@/services/social-media-service'

export default function CreateContentPage() {
  const router = useRouter()
  const { toast } = useToast()
  const [loading, setLoading] = useState(false)
  const [generating, setGenerating] = useState(false)
  const [topic, setTopic] = useState('')
  const [platform, setPlatform] = useState('facebook')
  const [contentType, setContentType] = useState('post')
  const [generatedContent, setGeneratedContent] = useState('')
  const [scheduledDate, setScheduledDate] = useState('')
  const [title, setTitle] = useState('')
  const [connectionStatus, setConnectionStatus] = useState<Record<string, boolean>>({
    facebook: false,
    youtube: false
  })

  // H칛mta anslutningsstatus f칬r sociala medier
  useEffect(() => {
    const checkConnections = async () => {
      try {
        const status = await SocialMediaService.getConnectionStatus()
        setConnectionStatus(status)
      } catch (error) {
        console.error('Kunde inte h칛mta anslutningsstatus:', error)
      }
    }
    
    checkConnections()
  }, [])
  
  // Generera inneh친ll med AI
  const generateContent = async () => {
    if (!topic) {
      toast({
        title: "츿mne saknas",
        description: "V칛nligen ange ett 칛mne f칬r inneh친llet.",
        variant: "destructive"
      })
      return
    }

    setGenerating(true)
    
    try {
      // Simulera API-anrop med en timeout
      // I en produktionsversion skulle detta anropa en extern AI-tj칛nst
      await new Promise(resolve => setTimeout(resolve, 2000))
      
      const exampleContent = {
        facebook: {
          post: `游닊 ${topic} - Nyheter!\n\nVi 칛r glada att kunna dela med oss av de senaste nyheterna om ${topic}. V친r plattform forts칛tter att utvecklas f칬r att m칬ta era behov.\n\n#${topic.replace(/\s+/g, '')} #innovation #socialmedia`,
          video: `Vill du l칛ra dig mer om ${topic}? I denna video g친r vi igenom grunderna och delar med oss av v친ra b칛sta tips. Perfekt f칬r b친de nyb칬rjare och erfarna anv칛ndare!\n\nGl칬m inte att gilla och dela om du fann detta hj칛lpsamt.`
        },
        youtube: {
          post: `游댠 NYTT: Allt du beh칬ver veta om ${topic} | Tips & tricks f칬r 2025\n\nI denna video guidar vi dig genom allt du beh칬ver veta om ${topic}. Fr친n grunderna till avancerade tekniker.\n\nTidskoder:\n00:00 Introduktion\n01:30 Grunderna i ${topic}\n05:45 Avancerade tekniker\n10:20 Sammanfattning`,
          video: `Allt du beh칬ver veta om ${topic} | Komplett guide 2025\n\nBeskrivning:\nV칛lkommen till v친r kompletta guide om ${topic}! I denna video g친r vi igenom allt fr친n grunden till avancerade tekniker som hj칛lper dig att lyckas med ${topic}.\n\nOm du tycker att denna video var hj칛lpsam, gl칬m inte att prenumerera och sl친 p친 notifikationer f칬r fler videor om ${topic} och liknande 칛mnen.`
        }
      }
      
      // V칛lj l칛mpligt inneh친ll baserat p친 plattform och inneh친llstyp
      const content = exampleContent[platform][contentType]
      setGeneratedContent(content)
      
      // S칛tt en standardtitel baserad p친 칛mnet
      const defaultTitle = platform === 'youtube' 
        ? `${topic} - Ultimate Guide` 
        : `${topic} - Updates`
      setTitle(defaultTitle)
      
      // Spara f칬rslaget i Supabase
      await contentService.createContentSuggestion({
        title: defaultTitle,
        content,
        platform: platform as 'facebook' | 'youtube',
        contentType: contentType as 'post' | 'video'
      })
      
      toast({
        title: "Inneh친ll genererat!",
        description: "AI har skapat inneh친ll baserat p친 ditt 칛mne."
      })
    } catch (error) {
      console.error('Fel vid generering av inneh친ll:', error)
      toast({
        title: "Ett fel uppstod",
        description: "Kunde inte generera inneh친ll. F칬rs칬k igen senare.",
        variant: "destructive"
      })
    } finally {
      setGenerating(false)
    }
  }

  // Publicera eller schemal칛gg inl칛gg
  const handlePublish = async (schedule = false) => {
    if (!generatedContent) {
      toast({
        title: "Inget inneh친ll",
        description: "V칛nligen generera inneh친ll f칬rst.",
        variant: "destructive"
      })
      return
    }

    if (schedule && !scheduledDate) {
      toast({
        title: "Inget datum valt",
        description: "V칛nligen v칛lj ett datum f칬r schemal칛ggning.",
        variant: "destructive"
      })
      return
    }
    
    // Kontrollera om anv칛ndaren 칛r ansluten till vald plattform
    if (!connectionStatus[platform]) {
      toast({
        title: "Inte ansluten",
        description: `Du 칛r inte ansluten till ${platform}. G친 till dashboard och anslut ditt konto f칬rst.`,
        variant: "destructive"
      })
      return
    }

    setLoading(true)
    
    try {
      // Skapa inneh친llsobjekt
      const content = {
        title: title || `${topic} post`,
        content: generatedContent,
        platform: platform as 'facebook' | 'youtube',
        contentType: contentType as 'post' | 'video'
      }
      
      if (schedule) {
        // Schemal칛gga inl칛gg
        // 1. Spara i Supabase
        await contentService.schedulePost({
          ...content,
          scheduledFor: scheduledDate,
          status: 'scheduled'
        })
        
        // 2. Publicera via social media service (om ansluten)
        if (connectionStatus[platform]) {
          await SocialMediaService.publishContent(
            content,
            true,
            scheduledDate
          )
        }
        
        toast({
          title: "Inl칛gg schemalagt!",
          description: `Ditt inl칛gg har schemalagts f칬r publicering ${scheduledDate}.`
        })
      } else {
        // Direktpublicering
        // Publicera via social media service
        await SocialMediaService.publishContent(content)
        
        toast({
          title: "Inl칛gg publicerat!",
          description: "Ditt inl칛gg har publicerats."
        })
      }
      
      // Navigera tillbaka till dashboard efter framg친ngsrik operation
      router.push('/dashboard')
    } catch (error) {
      console.error('Fel vid publicering/schemal칛ggning:', error)
      toast({
        title: "Ett fel uppstod",
        description: "Kunde inte slutf칬ra operationen. F칬rs칬k igen senare.",
        variant: "destructive"
      })
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="flex min-h-screen flex-col">
      <Navbar />
      <main className="flex-1 container mx-auto p-6">
        <Button 
          variant="ghost" 
          className="mb-6" 
          onClick={() => router.push('/dashboard')}
        >
          <ChevronLeft className="mr-2 h-4 w-4" />
          Tillbaka till dashboard
        </Button>

        <div className="flex flex-col md:flex-row gap-6">
          <div className="md:w-1/2">
            <Card>
              <CardHeader>
                <CardTitle>Skapa inneh친ll med AI</CardTitle>
                <CardDescription>
                  Beskriv ett 칛mne s친 genererar AI optimerat inneh친ll f칬r dina sociala medier
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="platform">Plattform</Label>
                  <Select 
                    value={platform} 
                    onValueChange={setPlatform}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="V칛lj plattform" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="facebook">
                        Facebook {!connectionStatus.facebook && "丘멆잺"}
                      </SelectItem>
                      <SelectItem value="youtube">
                        YouTube {!connectionStatus.youtube && "丘멆잺"}
                      </SelectItem>
                    </SelectContent>
                  </Select>
                  
                  {!connectionStatus[platform] && (
                    <div className="text-xs text-amber-600 flex items-center mt-1">
                      <AlertTriangle className="h-3 w-3 mr-1" /> 
                      Du 칛r inte ansluten till {platform}. F칬r att publicera beh칬ver du ansluta i dashboard.
                    </div>
                  )}
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="contentType">Typ av inneh친ll</Label>
                  <Select 
                    value={contentType} 
                    onValueChange={setContentType}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="V칛lj inneh친llstyp" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="post">Inl칛gg</SelectItem>
                      <SelectItem value="video">Videobeskrivning</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="topic">츿mne/nyckelord</Label>
                  <Input
                    id="topic"
                    placeholder="T.ex. digitala marknadsf칬ringstips"
                    value={topic}
                    onChange={(e) => setTopic(e.target.value)}
                  />
                </div>
                
                <Button 
                  onClick={generateContent} 
                  disabled={generating || !topic}
                  className="w-full"
                >
                  {generating ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Genererar...
                    </>
                  ) : (
                    <>
                      <Sparkles className="mr-2 h-4 w-4" />
                      Generera inneh친ll
                    </>
                  )}
                </Button>
              </CardContent>
            </Card>
          </div>
          
          <div className="md:w-1/2">
            <Card className="h-full flex flex-col">
              <CardHeader>
                <CardTitle>F칬rhandsgranskning</CardTitle>
                <CardDescription>
                  Redigera inneh친llet vid behov innan publicering
                </CardDescription>
              </CardHeader>
              <CardContent className="flex-grow flex flex-col">
                {generatedContent && (
                  <div className="mb-4 space-y-2">
                    <Label htmlFor="title">Titel</Label>
                    <Input
                      id="title"
                      placeholder="Ange en titel f칬r inl칛gget"
                      value={title}
                      onChange={(e) => setTitle(e.target.value)}
                    />
                  </div>
                )}
                
                <Textarea 
                  placeholder="Genererat inneh친ll visas h칛r..."
                  className="flex-grow min-h-[200px]"
                  value={generatedContent}
                  onChange={(e) => setGeneratedContent(e.target.value)}
                />
                
                {generatedContent && (
                  <div className="mt-6 space-y-4">
                    <div className="space-y-2">
                      <Label htmlFor="scheduledDate">Schemal칛gg publicering (valfritt)</Label>
                      <Input
                        id="scheduledDate"
                        type="datetime-local"
                        value={scheduledDate}
                        onChange={(e) => setScheduledDate(e.target.value)}
                      />
                    </div>
                    
                    <div className="flex gap-2">
                      <Button 
                        variant="outline" 
                        className="flex-1"
                        onClick={() => handlePublish(true)}
                        disabled={loading || !scheduledDate}
                      >
                        {loading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Calendar className="mr-2 h-4 w-4" />}
                        Schemal칛gg
                      </Button>
                      <Button 
                        className="flex-1"
                        onClick={() => handlePublish(false)}
                        disabled={loading}
                      >
                        {loading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                        Publicera nu
                      </Button>
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        </div>
      </main>
      <Footer />
    </div>
  )
} 